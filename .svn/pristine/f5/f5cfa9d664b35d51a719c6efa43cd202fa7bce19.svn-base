#include <EEPROM.h>
#include <Metro.h>

#include "lamp.h"

#include <Wire.h>
unsigned char  zero = 0x00;
Metro brMetro = Metro(1000);
Lamp  lmp = Lamp(13,0);

String inputString = ""; // a string to hold incoming data
String inputString1 = "";
boolean rxDone = false;  // whether the string is complete


//these pins can not be changed 2/3 are special pins
int encoderPin1 = 11;
int encoderPin2 = 12;
int encoderSwitchPin = 4; //push button switch

int SDI = 8; //YELLOW wire (not the red 5V wire!)
int CKI = 9; //Green wire

const int numSamples = 100;

volatile int lastEncoded = 0;
volatile long encoderValue = 0;
int encSums[numSamples];
int       encIndex;
int       encTotal;
int       encAvg;
int       encPAvg;

long lastencoderValue = 0;

int lastMSB = 0;
int lastLSB = 0;

bool btnLastState;
bool btnCurrentState;
int btnHoldTime;



int       brSamples[numSamples];
int       brIndex;
int       brTotal;
int       brAvg;
int       brPin = A1;
int brMin = 1024;
int brMax = 0;

void setup()
{
 Wire.begin();
  Serial.begin(9600);  

  inputString.reserve(10);
  inputString1.reserve(10);
  randomSeed(analogRead(5));

  Serial1.write(0x7C);
  Serial1.write(157);
  
  pinMode(encoderPin1, INPUT); 
  pinMode(encoderPin2, INPUT);
  pinMode(encoderSwitchPin, INPUT);
  
  pinMode(SDI, OUTPUT);
  pinMode(CKI, OUTPUT);

//init brightness readings
   for (int thisReading = 0; thisReading < numSamples; thisReading++)
   {
   brSamples[thisReading] = 0;
   encSums[thisReading] = 0;
   }
  lmp.Wake();

  Serial1.begin(9600);
}

void loop()
{
  
  
  
  
  
  
  
  
  
  lmp.update(); 
  updateEncoder();
  serialEvent();

  if (brMetro.check()==1)
  {
 //   brTotal -= brSamples[brIndex];
//    brSamples[brIndex] =  analogRead(brPin);
//    brTotal += brSamples[brIndex];
//    brIndex++;
    
//    if (brIndex>=numSamples) brIndex=0;
//    brAvg = brTotal/numSamples;
    //  Serial.print("br:");
    //  Serial.println(brAvg);
    
  //  if (brAvg > brMax) brMax = brAvg;
 //   if (brAvg < brMin) brMin = brAvg;
    
 //   byte br = map(brAvg,brMin,brMax,0,lmp.getLCDBrightness())  ;
    //lmp.backLightBr(br);
   // Serial.println(br);
    
  Wire.beginTransmission(DS1307_ADDRESS);

  Wire.write(0x00);
  Wire.endTransmission();

  Wire.requestFrom(DS1307_ADDRESS, 7);

  byte second =      45; //0-59
  byte minute =      40; //0-59
  byte hour =        0; //0-23
  byte weekDay =     2; //1-7
  byte monthDay =    1; //1-31
  byte month =       3; //1-12
  byte year  =       11; //0-99

    lmp.tSecond = lmp.bcdToDec(Wire.read());
    lmp.tMinute = lmp.bcdToDec(Wire.read());
    lmp.tHour = lmp.bcdToDec(Wire.read() & 0b111111); //24 hour time
    lmp.tDay = lmp.bcdToDec(Wire.read()); //0-6 -> sunday - Saturday
    lmp.tDate = lmp.bcdToDec(Wire.read());
    lmp.tMonth =lmp.bcdToDec(Wire.read());
    lmp.tYear =lmp.bcdToDec(Wire.read());

   lmp.tHour12 = lmp.tHour;
  if (lmp.tHour >12)   lmp.tHour12 = tHour-12;
   
  //print the date EG   3/1/11 23:59:59
 
   Serial.print(lmp.tMonth);
   Serial.print("/");
   Serial.print(lmp.tDate);
   Serial.print("/");
   Serial.print(lmp.tYear);
   Serial.print(" ");
   Serial.print(lmp.tHour);
   Serial.print(":");
   Serial.print(lmp.tMinute);
   Serial.print(":");
   Serial.println(lmp.tSecond);
    
    

    
    
  }


  if (rxDone)
  {   
    char rxData[inputString.length()];
    inputString.toCharArray(rxData,inputString.length());
    lmp.readSerial(rxData, sizeof(rxData));
    // clear the string:
    inputString = "";
    rxDone = false;

  }

 //long *c = lmp.ledColors();

 //  Serial.println(c[1],HEX);
//  if (*c != lastColor && lmp.isLampOn() )   Serial.println(c[1],HEX);

drawLights();

}

void drawLights (void) {
  //Each LED requires 24 bits of data
  //MSB: R7, R6, R5..., G7, G6..., B7, B6... B0 
  //Once the 24 bits have been delivered, the IC immediately relays these bits to its neighbor
  //Pulling the clock low for 500us or more causes the IC to post the data.
  long *c = lmp.ledColors();
  for(int LED_number = 0 ; LED_number < 2 ; LED_number++) {
    long this_led_color = c[LED_number]; //24 bits of color data

    for(byte color_bit = 23 ; color_bit != 255 ; color_bit--) {
      //Feed color bit 23 first (red data MSB)
      
      digitalWrite(CKI, LOW); //Only change data when clock is low
      
      long mask = 1L << color_bit;
      //The 1'L' forces the 1 to start as a 32 bit number, otherwise it defaults to 16-bit.
      
      if(this_led_color & mask && lmp.isLampOn()) 
        digitalWrite(SDI, HIGH);
      else
        digitalWrite(SDI, LOW);
  
      digitalWrite(CKI, HIGH); //Data is latched when clock goes high
    }
  }

  //Pull clock low to put strip into reset/post mode
  digitalWrite(CKI, LOW);
  delayMicroseconds(500); //Wait for 500us to go into reset
}


void serialEvent() 
{
  while (Serial.available())
  {
    // get the new byte:
    char inChar = (char)Serial.read(); 
    // add it to the inputString:
    if (!rxDone) inputString += inChar;
    // if the incoming character is a newline, set a flag
    // so the main loop can do something about it:
    if (inChar == '\n' || inChar =='\r' || inChar=='\t')   rxDone = true;
  }
  
  //Mirror Serial1 to Serial,   Jump Pin0 to Pin1
/*  while (Serial1.available())
 {
    byte inChar1 = Serial1.read();
    if (inChar1 > 127) 
    {
      Serial.println(inChar1,HEX);
    }
    else
    {
      Serial.write(inChar1);
    }
  }*/
}

void updateEncoder()
{
  int MSB = digitalRead(encoderPin1); //MSB = most significant bit
  int LSB = digitalRead(encoderPin2); //LSB = least significant bit

  int encoded = (MSB << 1) |LSB; //converting the 2 pin value to single number
  int sum  = (lastEncoded << 2) | encoded; //adding it to the previous encoded value

  if(sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) encoderValue ++;
  if(sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) encoderValue --;

    encTotal -= encSums[brIndex];
    encSums[encIndex] =  encoderValue;
    encTotal += encSums[encIndex];
    encIndex++;
   
   
  if (encIndex>=numSamples)
   {
     encIndex=0;
   }
   
      encAvg = encTotal/numSamples; 

 

  if(encAvg > encPAvg) lmp.readSerial("r", 2);
  if(encAvg < encPAvg) lmp.readSerial("l", 2);

     encPAvg = encAvg;

  btnCurrentState = digitalRead(encoderSwitchPin);

  if(btnCurrentState == LOW && btnCurrentState != btnLastState)
  {
    int hTime = millis() - btnHoldTime;
    if (hTime < 500) lmp.readSerial("c", 2);
    if (hTime > 500 && hTime <1500) lmp.readSerial("h", 2);
    if (hTime > 1500 && lmp.menuPosition() ==0x0) lmp.readSerial("lmp", 4);
    if (hTime > 1500) lmp.readSerial("t", 2);

     Serial.println(hTime);
    btnHoldTime = 0;
  }
  else if (btnCurrentState && btnCurrentState != btnLastState){
    btnHoldTime = millis();
   
  }
  
  btnLastState = btnCurrentState;
  lastEncoded = encoded; //store this value for next time
}



